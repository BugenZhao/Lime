var vec = [1, 2, 3];
assert_eq(vec.len(), 3);
assert_eq(vec.is_empty(), false);
assert_eq(vec.get(0), 1);
assert_eq(vec.get(1), 2);
assert_eq(vec.get(100).is_nil(), true);

vec.set(2, 4);
assert_eq(vec.get(2), 4);
vec.push(5);
assert_eq(vec.len(), 4);
assert_eq(vec.get(3), 5);

vec.pop();
vec.pop();
assert_eq(vec.len(), 2);

var iter = vec.iter();
assert_eq(iter.next(), 1);
assert_eq(iter.next(), 2);
assert_eq(iter.next().is_nil(), true);

var iter = vec.iter();
assert_eq(iter.next(), 1);
assert_eq(iter.next(), 2);
assert_eq(iter.next().is_nil(), true);


{
    var vec_copied = [];
    for e in vec {
        vec_copied.push(e);
    }
    assert_eq(vec, vec_copied);
}

{
    var vec_copied = vec.map(id);
    assert_eq(vec, vec_copied);
}

{
    var vec_copied = vec.fold([], |vec, e| { vec.push(e); vec; });
    assert_eq(vec, vec_copied);
}

vec.clear();
assert_eq(vec.len(), 0);
assert_eq(vec.is_empty(), true);
